<?xml version="1.0" encoding="utf-8"?>
<!--
********************************** DO NOT EDIT **********************************

This file will be replaced during upgrades so DO NOT EDIT this file. If you need to
adjust the process, reading and understanding this file is the first step.

In most cases, the adjustments can be achieved by setting properties or providing one
of the "hooks" in the form of a "-before-" or "-after-" target. Whenever possible, look
for one of these solutions.

Failing that, you can copy whole targets to your build.xml file and it will overrride
the target provided here. Doing that can create problems for upgrading to newer
versions of Cmd so it is not recommended but it will be easier to manage than editing
this file in most cases.
-->
<project name="app-build-impl">
    <!--
    Init-Local
    -->
    <target name="-before-init-local"/>
    <target name="-init-local">
        <property file="${basedir}/../../local.properties"/>

        <script language="javascript">
            var f = new java.io.File(project.getProperty("basedir"));
            var sub = ".sencha/workspace/sencha.cfg";

            for (var p = f; p; p = p.getParentFile()) {
                var t = new java.io.File(p, sub);
                if (t.exists()) {
                    // we found the workspace folder!

                    t = new java.io.File(p, "local.properties");
                    if (t.exists()) {
                        var loader = project.createTask("property");
                        loader.setFile(new java.io.File(t.getCanonicalPath()));
                        loader.execute();
                    }

                    break;
                }
            }
        </script>

    </target>
    <target name="-after-init-local"/>
    <target name="init-local"
            depends="-before-init-local,-init-local,-after-init-local"/>

    <!--
    Find Sencha Cmd
    -->
    <target name="find-cmd" unless="cmd.dir">
        <!--
        Run "sencha which" to find the Sencha Cmd basedir and get "cmd.dir" setup. We
        need to execute the command with curdir set properly for Cmd to pick up that we
        are running for an application.
        -->
        <exec executable="sencha" dir="${basedir}">
            <arg value="which"/><arg value="-o=$cmddir$"/>
        </exec>

        <!-- Now read the generated properties file and delete it -->
        <property file="$cmddir$"/>
        <delete file="$cmddir$"/>

        <echo>Using Sencha Cmd from ${cmd.dir}</echo>
    </target>

    <!--
    Init
    -->
    <target name="-before-init"/>
    <target name="-init">
        <taskdef resource="com/sencha/ant/antlib.xml" 
                 classpath="${cmd.dir}/sencha.jar"
                 loaderref="senchaloader"/>
        <x-sencha-init prefix=""/>
        
        <!-- default the build environment to production if it is unset by this point -->
        <property name="args.environment" value="production"/>
        <property name="CR" value="&#10;"/>
        
        <x-load-properties file="${app.config.dir}/${args.environment}.properties" required="0"/>
        <x-load-properties file="${app.config.dir}/build.properties" required="0"/>
        
        <if>
            <x-is-true value="${build.compression.yui}"/>
            <then>
                <property name="build.compression" value="-yui"/>
            </then>
            <else>
                <if>
                    <x-is-true value="${build.compression.closure}"/>
                    <then>
                        <property name="build.compression" value="-closure"/>
                    </then>
                    <else>
                        <if>
                            <x-is-true value="${build.compression.uglify}"/>
                             <then>
                                <property name="build.compression" value="-uglify"/>
                             </then>
                             <else>
                                <property name="build.compression" value=""/>
                             </else>
                        </if>
                    </else>
                </if>
            </else>
        </if>
        
        <x-normalize-path path="${build.dir}/resources" property="image.search.path"/>
                        
        <if>
            <not>
            <isset property="app.theme"/>
            </not>
            <then>
                <property name="skip.sass" value="true"/>
                <property name="skip.slice" value="true"/>
            </then>
        </if>

        
        <!-- Some operations require sencha.jar in the Ant classpath -->
        <x-extend-classpath>
            <jar path="${cmd.dir}/sencha.jar"/>
        </x-extend-classpath>
        
        <x-verify-app-cmd-ver/>
       
        <property name="compiler.ref.id" value="app-compiler"/>
    </target>
    <target name="-after-init"/>

    <target name="-before-init-default"/>
    <target name="-init-default">
        <!--
             This property can be modified to change general build options
             such as excluding files from the set.  The format expects newlines
             for each argument, for example:
             
             <property name="build.operations"/>
                   exclude
                       -namespace=Ext
             </property>
        -->
        <property name="build.operations" value=""/>
        
        <!--
             This property can be modified to change concatenation
             specific options
             
             -strip-comments: comment suppression
             -remove-text-references: transform string literal class references to objects
             -beautify: unpack the source
             
             <property name="build.concat.options"/>
                    -strip-comments
                    -remove-text-references
                    -beautify
             </property>
        -->
        <property name="build.concat.options" value=""/>
        
        <!--
             This property can be modified to change page compilation options
             
             -scripts: inject the given script path into the generated markup ahead of the all classes file
             
             <property name="build.page.options"/>
                    -scripts=framework.js
             </property>
        -->
        <property name="build.page.options" value=""/>
    </target>
    <target name="-after-init-default"/>
    
    <target name="-init-compiler" depends="-init">
        <x-compile refid="${compiler.ref.id}" dir="${app.dir}" initOnly="true" inheritAll="true">
            <![CDATA[
                # base build command
                -options=${build.options}
                page
                    -name=full-page
                    -in=${app.page.file}
                    -out=${build.page.file}
                    -classes=${build.classes.name}
                    -stylesheet=${app.out.css.rel}  
                    ${build.page.options}
                and
                restore
                    full-page     
                and
                require
                    -source=@page-full-page
                    -requires=@overrides
                    -allow-unmet=true
                and
                union
                    -not
                    -recursive
                    -tag=page-full-page
                and
                save
                    full-page-overrides
                and
                ${build.operations}
                and
                save
                    page
            ]]>
        </x-compile>
    </target>
    
    <target name="init"
            depends="init-local,find-cmd,-before-init,-init,-after-init,-before-init-default,-init-default,-after-init-default"/>
    
    <!--
    Clean
    -->
    <target name="-before-clean"/>
    <target name="-clean">
        <delete dir="${build.dir}"/>
    </target>
    <target name="-after-clean"/>
    <target name="clean"
            depends="init,-before-clean,-clean,-after-clean"
            description="Removes all build output produced by the 'build' target"/>

    
    <target name="-compile-sass" depends="-init-compiler">
        <x-compile refid="${compiler.ref.id}">
            <![CDATA[
                restore
                    page
                and
                #only set variables for used classes eg. $include-class-name
                sass
                    +class-name-vars
                    -variable=$image-search-path:'${image.search.path}'
                    -variable=$theme-name: '${app.theme}' !default
                    -output=${app.out.scss}
                and
                include
                    -all
                and
                # include etc and vars from all classes
                sass
                    +etc
                    +vars
                    +append
                    -output=${app.out.scss}
                and
                restore
                    page
                and
                #only include rules from used classes
                sass
                    +rules
                    +append
                    -output=${app.out.scss}
                and
                sass
                    +ruby
                    -output=${app.out.ruby}
            ]]>
        </x-compile>
        <!--
        app.out.css.path is relative to the app output index.html file
        -->
        <x-get-relative-path
            from="${app.dir}"
            to="${app.out.css}"
            property="app.out.css.path"
            />
      
<!--update the application's bootstrap.css file to point to the build output-->

<echo file="${app.bootstrap.css}">
/*
 * This file is generated by Sencha Cmd and should NOT be edited. It redirects
 * to the most recently built CSS file for the application to allow index.html
 * in the development directory to load properly (i.e., "dev mode").
 */
@import '${app.out.css.path}';
</echo>
     </target>

     <target name="-compass-compile" depends="-compile-sass">
        <property name="compass.compile.force" value="true"/>
        <x-compass-compile
            dir="${build.dir}"
            trace="true"
            boring="false"
            force="${compass.compile.force}"
            sassdir="${compass.sass.dir}"
            cssdir="${compass.css.dir}"
            config="${compass.config.file}"/>
     </target>

     <target name="-compile-slicer-sass" depends="-init-compiler">
        <x-compile refid="${compiler.ref.id}">
            <![CDATA[
                restore
                    page
                and
                include
                    -all
                and
                sass
                    +class-name-vars
                    +etc
                    +vars
                    +rules
                    -variable=$image-search-path:'${image.search.path}'
                    -variable=$theme-name: '${app.theme}' !default
                    -output=${app.example.scss}
                and
                restore
                    page
                and
                sass
                    +ruby
                    -output=${app.out.ruby}
            ]]>
        </x-compile>

        <x-get-relative-path
            from="${app.example.dir}"
            to="${app.example.css}"
            property="app.example.css.path"
            />
        
<!--update the app's example to point to the build output-->
<echo file="${app.example.dir}/example.css">
/*
 * This file is generated by Sencha Cmd and should NOT be edited. It redirects
 * to the most recently built CSS file for the application to allow theme.html
 * to load properly for image slicing (required to support non-CSS3 browsers
 * such as IE9 and below).
 */
@import '${app.example.css.path}';
</echo>         
     </target>

     <target name="-compass-compile-slicer-css" depends="-compile-slicer-sass">
        <property name="compass.compile.force" value="true"/>
        <x-compass-compile
            dir="${build.dir}"
            trace="true"
            boring="false"
            force="${compass.compile.force}"
            sassdir="${compass.sass.dir}"
            cssdir="${compass.css.dir}"
            config="${compass.config.file}"/>
     </target>

    <!--
    Build SASS
    -->
    <target name="-before-sass"/>
    <target name="-sass">
        <x-ant-call target="-compass-compile"/>

        <macrodef name="x-compress-css-files">
            <attribute name="dir"/>
            <attribute name="prefix"/>
            <attribute name="outprefix"/>
            <attribute name="compress"/>
            <attribute name="preprocess"/>
            <sequential>
                <x-split-css file="@{dir}/@{prefix}.css"
                             outdir="${build.resources.dir}"
                             limit="${build.css.selector.limit}"/>

                <for param="cssfile">
                    <fileset dir="@{dir}" includes="@{prefix}*.css"/>
                    <sequential>
                        <local name="css.output.name"/>
                        <local name="pattern"/>
                        <property name="pattern" value="(.*?)(@{prefix})(_\d{1,2})*\.css"/>
                        <propertyregex property="css.output.name"
                                       input="@{cssfile}"
                                       regexp="${pattern}"
                                       select="\1@{outprefix}\3.css"
                                       override="true"/>
                        <if>
                            <equals arg1="@{preprocess}" arg2="true"/>
                            <then>
                                <echo>Preprocessing @{cssfile} to ${css.output.name}</echo>
                                <x-css-preprocess 
                                    file="@{cssfile}" 
                                    tofile="${css.output.name}" 
                                    options="${build.css.preprocessor.opts}"/>
                            </then>
                        </if>
                        <if>
                            <equals arg1="@{compress}" arg2="true"/>
                            <then>
                                <echo>Compressing @{cssfile} to ${css.output.name}</echo>
                                <x-compress-css srcfile="@{cssfile}"
                                                outfile="${css.output.name}"/>
                            </then>
                        </if>
                    </sequential>
                </for>
            </sequential>
        </macrodef>

        <x-compress-css-files dir="${build.dir}/resources"
                              prefix="${app.out.base.debug}"
                              outprefix="${app.out.base}"
                              preprocess="${build.css.preprocess}"
                              compress="${build.css.compress}"/>
                
    </target>
    <target name="-after-sass"/>
    <target name="sass" depends="init" unless="skip.sass"
            description="Builds only the SASS files using Compass">
        <x-ant-call target="-before-sass"/>
        <x-ant-call target="-sass"/>
        <x-ant-call target="-after-sass"/>
    </target>

    <target name="-compile-resources" depends="-init-compiler">
        <x-compile refid="${compiler.ref.id}">
            <![CDATA[
                resources
                    -excludes=-all*.css
                    -out=${build.resources.dir}
            ]]>
        </x-compile>
    </target>

    <!--
    Copy Resources
    -->
    <target name="-before-inherit-resources"/>
    <target name="-before-copy-resources"/>
    <target name="-after-copy-resources"/>
    <target name="-after-inherit-resources"/>
    <target name="copy-resources" depends="init"
            description="Copy theme resources to folder">
        <x-ant-call target="-before-inherit-resources"/>
        <x-ant-call target="-before-copy-resources"/>
        <x-ant-call target="-compile-resources"/>
        <x-ant-call target="-after-copy-resources"/>
        <x-ant-call target="-after-inherit-resources"/>
    </target>
    
    
    <macrodef name="x-run-bootstrap">
        <attribute name="file"/>
        <attribute name="basedir"/>
        <sequential>
<echo file="@{file}">
/**
 * This file is generated by Sencha Cmd and should NOT be edited.  It is 
 * provided to support globbing requires, custom xtypes, and other 
 * metadata-driven class system features 
 */
</echo>
            <x-compile refid="${compiler.ref.id}">
                <![CDATA[
                    union
                        -not
                        -tag=core
                    and
                    metadata
                        +append
                        --base-path=@{basedir}
                        +loader-paths
                        -jsonp=Ext.Loader.addClassPathMappings
                        -out=@{file}
                    and
                    exclude
                        -tag=framework
                    and
                    include
                        -namespace=Ext.ux
                    and
                    metadata
                        --base-path=@{basedir}
                        +alternates
                        +append
                        -out=@{file}
                    and
                    metadata
                        --base-path=@{basedir}
                        +alias
                        +append
                        -out=@{file}
                    and
                    union
                        -tag=overrides
                    and
                    metadata
                        --base-path=@{basedir}
                        +append
                        +filenames
                        -tpl=Ext.Loader.loadScript("{0}");
                        -out=@{file}
                ]]>
            </x-compile>
        </sequential>
    </macrodef>
    
    <!--
    Slice
    -->
    <target name="-before-slice"/>
    <target name="-slice">
        <x-ant-call target="-compass-compile-slicer-css"/>
        <x-run-bootstrap file="${bootstrap.example.js}" 
                         basedir="${bootstrap.base.path}"/>
       
        <echo>Capture theme image to ${build.capture.png}</echo>
        <x-sencha-command>
            <![CDATA[
                theme
                    capture
                        -page=${app.example.theme.html}
                        -image=${build.capture.png}
                        -manifest=${build.capture.json}
            ]]>
        </x-sencha-command>

        <echo>Slicing theme images to ${build.resources.dir}</echo>
        <x-sencha-command>
            <![CDATA[
                fs
                    slice
                        ${build.slice.options}
                        -image=${build.capture.png}
                        -manifest=${build.capture.json}
                        -out=${build.resources.dir}
            ]]>
        </x-sencha-command>
    </target>
    <target name="-after-slice"/>
    <target name="slice" depends="init" unless="skip.slice"
            description="Slices CSS3 theme to produce non-CSS3 images and sprites">
        <x-ant-call target="-before-slice"/>
        <x-ant-call target="-slice"/>
        <x-ant-call target="-after-slice"/>
    </target>
    
    <!--
    Refresh Individual Theme
    -->
    <target name="-before-refresh-theme"/>
    <target name="-refresh-theme">
        <echo>Executing 'sencha package build' for theme package ${args.themeName}</echo>
        <x-sencha-command 
            dir="${workspace.theme.dir}"
            inheritAll="false">
            <property name="cmd.dir" value="${cmd.dir}"/>
            package
            build
        </x-sencha-command>
    </target>
    <target name="-after-refresh-theme"/>
    <target name="refresh-theme" depends="init" unless="skip.theme"
            description="Executes 'sencha package build' for the specified theme package name">
        <x-ant-call target="-before-refresh-theme"/>
        <x-ant-call target="-refresh-theme"/>
        <x-ant-call target="-after-refresh-theme"/>
    </target>

    <!--
    Build Page
    -->
    <target name="-before-page"/>
    <target name="-page" depends="-init-compiler">
        <!--run compile command to generate concatenated output files for js and scss-->
        <x-compile refid="${compiler.ref.id}">
            <![CDATA[
                restore
                    page
                and
                ${build.optimize}
                and
                concat
                    ${build.compression}
                    -out=${build.classes.file}
                    ${build.concat.options}
            ]]>
        </x-compile>
    </target>
    <target name="-after-page"/>
    <target name="page" depends="init" unless="skip.page"
            description="Builds only the application's HTML page">
        <x-ant-call target="-before-page"/>
        <x-ant-call target="-page"/>
        <x-ant-call target="-after-page"/>
    </target>

    <!--
    Build
    -->
    <target name="-before-build"/>
    <target name="-build" depends="refresh,page,copy-resources,sass,slice"/>
    <target name="-after-build"/>
    <target name="build"
            depends="init,-before-build,-build,-after-build"
            description="Builds the application"/>

    <!--
    Refresh
    -->
    <target name="-before-refresh"/>
    <target name="-refresh" depends="-init-compiler">
        <property name="args.metadatafile" value="${app.dir}/bootstrap.js"/>
        <property name="args.basepath" value="${app.dir}"/>
        <x-run-bootstrap file="${args.metadatafile}"
                         basedir="${args.basepath}"/>
    </target>
    <target name="-after-refresh"/>
    <target name="refresh"
            depends="init,-before-refresh,-refresh,-after-refresh"
            description="Builds the application"/>
    
    <target name="-watch-impl" depends="-refresh,-compile-resources,-compass-compile"/>
    
    <target name="-before-watch" depends="init"/>
    <target name="-watch" depends="app-build-impl.build,-compile-resources,-compass-compile">
        <if>
            <equals arg1="${enable.compass.watch}" arg2="true"/>
            <then>
                <x-compass-watch
                    dir="${build.dir}"
                    trace="true"
                    boring="false"
                    force="${compass.compile.force}"
                    sassdir="${compass.sass.dir}"
                    cssdir="${compass.css.dir}"
                    config="${compass.config.file}"
                    fork="true"/>
            </then>
        </if>
        <x-watch compilerRef="${compiler.ref.id}" targets="${watch.targets}"/>
    </target>
    <target name="-after-watch" depends="init"/>
    <target name="watch">
        <property name="skip.sass" value="true"/>
        <property name="skip.slice" value="true"/>
        <property name="build.optimize" value=""/>
        <property name="compass.compile.force" value="false"/>
        <property name="enable.compass.watch" value="false"/>
        <property name="watch.targets" value="-watch-impl"/>
        <x-ant-call target="-before-watch"/>
        <x-ant-call target="-watch"/>
        <x-ant-call target="-after-watch"/>
    </target>
    
    <!--
    environment setters
    -->

    <target name="production">
        <property name="args.environment" value="production"/>
    </target>

    <target name="testing">
        <property name="args.environment" value="testing"/>
    </target>

    <target name="native">
        <property name="args.environment" value="native"/>
    </target>

    <target name="package">
        <property name="args.environment" value="package"/>
    </target>
    
    <!--
    Helpful targets
    -->
    <target name=".props" depends="init"
            description="Lists all properties defined for the build">
        <echoproperties/>
    </target>

    <target name=".help" depends="init"
            description="Provides help on the build script">
        <x-get-project-targets property="help.message"/>

        <echo><![CDATA[${help.message}
This is the main build script for your application.

The following properties can be used to disable certain steps in the build
process.

 * skip.page        Do not build the HTML page.
 * skip.sass        Do not build the SASS.
 * skip.theme       Do not build the theme images.
            
The following properties can be used to modify the build process.
            
 * build.compression.yui                Specify yui compression for the build

 * build.compression.closure            Specify closure compression for the build
            
 * build.compression.uglify             Specify uglify compression for the build
            
 * build.options                        Set general options for the build
                                        (eg: enable a debug build)
 
         To modify any of the previous build specific options, see:
           ${basedir}/.sencha/app/${args.environment}.properties
            
 * build.operations                     Insert commands into the compile command
                                        for the build.
            
 * app.page.name                        Set the input and output page file
                                        for the compile command.
 
 * build.classes.name                   Specify the compiled js file
                                        

For details about how these options affect your build, see

    ${basedir}/.sencha/app/build-impl.xml

These options can be stored in a local.properties file in this folder or in the
local.properties file in the workspace.

Alternatively, these can be supplied on the command line. For example:

    ant -Dskip.sass=1 build

To see all currently defined properties, do this:

    ant .props
        ]]></echo>
    </target>

</project>
